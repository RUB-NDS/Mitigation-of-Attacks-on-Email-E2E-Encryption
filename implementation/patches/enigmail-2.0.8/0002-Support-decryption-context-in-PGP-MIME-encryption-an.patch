From b51ade1a15353db619120389d6cf66cecc3d2361 Mon Sep 17 00:00:00 2001
From: DC Demo <decryptioncontext@gmail.com>
Date: Fri, 15 Nov 2019 00:20:40 +0100
Subject: [PATCH 2/2] Support decryption context in PGP MIME encryption and
 decryption.

---
 package/decryption.jsm  | 18 ++++++--
 package/encryption.jsm  | 19 +++++---
 package/mimeDecrypt.jsm | 92 +++++++++++++++++++++++++++++++++++++-
 package/mimeEncrypt.jsm | 99 ++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 214 insertions(+), 14 deletions(-)

diff --git a/package/decryption.jsm b/package/decryption.jsm
index e09c7fac..af4a3777 100644
--- a/package/decryption.jsm
+++ b/package/decryption.jsm
@@ -63,7 +63,7 @@ function newStatusObject() {
 var EnigmailDecryption = {
   decryptMessageStart: function(win, verifyOnly, noOutput, listener,
     statusFlagsObj, errorMsgObj, mimeSignatureFile,
-    maxOutputLength) {
+    maxOutputLength, associatedData) {
     EnigmailLog.DEBUG("decryption.jsm: decryptMessageStart: verifyOnly=" + verifyOnly + "\n");
 
     if (!EnigmailCore.getService(win)) {
@@ -97,6 +97,11 @@ var EnigmailDecryption = {
       args.push(keyserver);
     }
 
+    if (associatedData) {
+	args.push("--associated-data");
+	args.push(associatedData);
+    }
+
     if (EnigmailGpg.getGpgFeature("supports-sender") &&
       win && win.gFolderDisplay && win.gFolderDisplay.selectedMessage) {
       var fromAddr = win.gFolderDisplay.selectedMessage.author;
@@ -474,7 +479,7 @@ var EnigmailDecryption = {
   decryptMessage: function(parent, uiFlags, cipherText,
     signatureObj, exitCodeObj,
     statusFlagsObj, keyIdObj, userIdObj, sigDetailsObj, errorMsgObj,
-    blockSeparationObj, encToDetailsObj) {
+    blockSeparationObj, encToDetailsObj, associatedData) {
     const esvc = EnigmailCore.getEnigmailService();
 
     EnigmailLog.DEBUG("enigmail.js: Enigmail.decryptMessage: " + cipherText.length + " bytes, " + uiFlags + "\n");
@@ -576,7 +581,7 @@ var EnigmailDecryption = {
     // to avoid DoS attack
     var proc = EnigmailDecryption.decryptMessageStart(parent, verifyOnly, noOutput, listener,
       statusFlagsObj, startErrorMsgObj,
-      null, maxOutput);
+      null, maxOutput, associatedData);
 
     if (!proc) {
       errorMsgObj.value = startErrorMsgObj.value;
@@ -742,7 +747,7 @@ var EnigmailDecryption = {
   },
 
   decryptAttachment: function(parent, outFile, displayName, byteData,
-    exitCodeObj, statusFlagsObj, errorMsgObj) {
+    exitCodeObj, statusFlagsObj, errorMsgObj, associatedData) {
     const esvc = EnigmailCore.getEnigmailService();
 
     EnigmailLog.DEBUG("enigmail.js: Enigmail.decryptAttachment: parent=" + parent + ", outFileName=" + outFile.path + "\n");
@@ -796,6 +801,10 @@ var EnigmailDecryption = {
     let args = EnigmailGpg.getStandardArgs(true);
     args.push("--yes");
     args = args.concat(EnigmailPassword.command());
+    if (associatedData) {
+	args.push("--associated-data");
+	args.push(associatedData);
+    }
     args.push("-d");
 
 
diff --git a/package/encryption.jsm b/package/encryption.jsm
index 8c931ad1..7e80798d 100644
--- a/package/encryption.jsm
+++ b/package/encryption.jsm
@@ -44,7 +44,7 @@ const GPG_COMMENT_OPT = "Using GnuPG with %s - https://www.enigmail.net/";
 
 var EnigmailEncryption = {
   getEncryptCommand: function(fromMailAddr, toMailAddr, bccMailAddr, hashAlgorithm, sendFlags, isAscii, errorMsgObj,
-    logFileObj) {
+    logFileObj, associatedData) {
     EnigmailLog.DEBUG("encryption.jsm: getEncryptCommand: hashAlgorithm=" + hashAlgorithm + "\n");
 
     try {
@@ -110,6 +110,11 @@ var EnigmailEncryption = {
           encryptArgs.push("-a");
       }
 
+      if (associatedData) {
+        encryptArgs.push("--associated-data");
+        encryptArgs.push(associatedData);
+      }
+
       encryptArgs.push("--encrypt");
 
       if (signMsg)
@@ -235,7 +240,7 @@ var EnigmailEncryption = {
   },
 
   encryptMessageStart: function(win, uiFlags, fromMailAddr, toMailAddr, bccMailAddr,
-    hashAlgorithm, sendFlags, listener, statusFlagsObj, errorMsgObj) {
+    hashAlgorithm, sendFlags, listener, statusFlagsObj, errorMsgObj, associatedData) {
     EnigmailLog.DEBUG("encryption.jsm: encryptMessageStart: uiFlags=" + uiFlags + ", from " + fromMailAddr + " to " + toMailAddr + ", hashAlgorithm=" + hashAlgorithm + " (" + EnigmailData.bytesToHex(
       EnigmailData.pack(sendFlags, 4)) + ")\n");
 
@@ -272,7 +277,7 @@ var EnigmailEncryption = {
     }
 
     let logFileObj = {};
-    let encryptArgs = EnigmailEncryption.getEncryptCommand(fromMailAddr, toMailAddr, bccMailAddr, hashAlgo, sendFlags, ENC_TYPE_MSG, errorMsgObj, logFileObj);
+    let encryptArgs = EnigmailEncryption.getEncryptCommand(fromMailAddr, toMailAddr, bccMailAddr, hashAlgo, sendFlags, ENC_TYPE_MSG, errorMsgObj, logFileObj, associatedData);
     if (!encryptArgs)
       return null;
 
@@ -379,7 +384,7 @@ var EnigmailEncryption = {
   },
 
   encryptMessage: function(parent, uiFlags, plainText, fromMailAddr, toMailAddr, bccMailAddr, sendFlags,
-    exitCodeObj, statusFlagsObj, errorMsgObj) {
+    exitCodeObj, statusFlagsObj, errorMsgObj, associatedData) {
     EnigmailLog.DEBUG("enigmail.js: Enigmail.encryptMessage: " + plainText.length + " bytes from " + fromMailAddr + " to " + toMailAddr + " (" + sendFlags + ")\n");
 
     exitCodeObj.value = -1;
@@ -417,7 +422,7 @@ var EnigmailEncryption = {
     var proc = EnigmailEncryption.encryptMessageStart(parent, uiFlags,
       fromMailAddr, toMailAddr, bccMailAddr,
       null, sendFlags,
-      listener, statusFlagsObj, errorMsgObj);
+      listener, statusFlagsObj, errorMsgObj, associatedData);
     if (!proc) {
       exitCodeObj.value = -1;
       EnigmailLog.DEBUG("  <=== encryptMessage()\n");
@@ -453,7 +458,7 @@ var EnigmailEncryption = {
   },
 
   encryptAttachment: function(parent, fromMailAddr, toMailAddr, bccMailAddr, sendFlags, inFile, outFile,
-    exitCodeObj, statusFlagsObj, errorMsgObj) {
+    exitCodeObj, statusFlagsObj, errorMsgObj, associatedData) {
     EnigmailLog.DEBUG("encryption.jsm: EnigmailEncryption.encryptAttachment infileName=" + inFile.path + "\n");
 
     statusFlagsObj.value = 0;
@@ -466,7 +471,7 @@ var EnigmailEncryption = {
     catch (ex) {}
 
     const asciiFlags = (asciiArmor ? ENC_TYPE_ATTACH_ASCII : ENC_TYPE_ATTACH_BINARY);
-    let args = EnigmailEncryption.getEncryptCommand(fromMailAddr, toMailAddr, bccMailAddr, "", sendFlags, asciiFlags, errorMsgObj);
+    let args = EnigmailEncryption.getEncryptCommand(fromMailAddr, toMailAddr, bccMailAddr, "", sendFlags, asciiFlags, errorMsgObj, associatedData);
 
     if (!args) {
       return null;
diff --git a/package/mimeDecrypt.jsm b/package/mimeDecrypt.jsm
index 4a44e75e..a7193894 100644
--- a/package/mimeDecrypt.jsm
+++ b/package/mimeDecrypt.jsm
@@ -29,6 +29,9 @@ Cu.import("resource://enigmail/mime.jsm"); /*global EnigmailMime: false */
 Cu.import("resource://enigmail/uris.jsm"); /*global EnigmailURIs: false */
 Cu.import("resource://enigmail/constants.jsm"); /*global EnigmailConstants: false */
 Cu.import("resource://enigmail/singletons.jsm"); /*global EnigmailSingletons: false */
+Cu.import("resource://enigmail/stdlib.jsm"); /*global EnigmailStdlib: false */
+Cu.import("resource://enigmail/execution.jsm"); /*global EnigmailExecution: false */
+Cu.import("resource://enigmail/mimeEncrypt.jsm");
 
 const APPSHELL_MEDIATOR_CONTRACTID = "@mozilla.org/appshell/window-mediator;1";
 const PGPMIME_JS_DECRYPTOR_CONTRACTID = "@mozilla.org/mime/pgp-mime-js-decrypt;1";
@@ -140,6 +143,9 @@ function MimeDecryptHandler() {
   this.mimePartNumber = "";
   this.dataIsBase64 = null;
   this.base64Cache = "";
+  this.mime_msg = null;
+  this.mime_msg_done = false;
+  this.mime_msg_cnt = 0;
 }
 
 MimeDecryptHandler.prototype = {
@@ -185,6 +191,9 @@ MimeDecryptHandler.prototype = {
     this.decryptedHeaders = {};
     this.xferEncoding = ENCODING_DEFAULT;
     this.boundary = EnigmailMime.getBoundary(this.mimeSvc.contentType);
+    this.mime_msg = null;
+    this.mime_msg_done = false;
+    this.mime_msg_cnt++;
 
     if (uri) {
       this.uri = uri.QueryInterface(Ci.nsIURI).clone();
@@ -194,6 +203,21 @@ MimeDecryptHandler.prototype = {
     if (!this.isReloadingLastMessage()) {
       EnigmailSingletons.clearLastDecryptedMessage();
     }
+
+    if (this.uri) {
+	dump("PROCESSING EMAIL: " + this.uri.spec + " " + this.mimePartNumber + "\n");
+
+	var msgHdr = this.uri.QueryInterface(Components.interfaces.nsIMsgMessageUrl).messageHeader;
+	var obj = this;
+	var cnt = obj.mime_msg_cnt;
+	EnigmailStdlib.msgHdrGetHeaders(msgHdr, function (aMimeMsg) {
+	    EnigmailLog.DEBUG("mimeDecrypt.jsm: GOT MIME MESSAGE: " + cnt + " (expected: " + obj.mime_msg_cnt + ")\n");
+            if (cnt == obj.mime_msg_cnt) {
+		obj.mime_msg = aMimeMsg;
+		obj.mime_msg_done = true;
+	    }
+	});
+    }
   },
 
   processData: function(data) {
@@ -464,10 +488,76 @@ MimeDecryptHandler.prototype = {
       var windowManager = Cc[APPSHELL_MEDIATOR_CONTRACTID].getService(Ci.nsIWindowMediator);
       win = windowManager.getMostRecentWindow(null);
 
+	var cnt = 0;
+	var associatedData = undefined;
+	// This hack is necessary to give the asynchronous fetching of the message header
+	// some time to finish.  It would be better for the extension API to provide this
+	// data directly.
+	while (! this.mime_msg_done && cnt < 20)
+	{
+	    EnigmailLog.DEBUG("mimeDecryp.jsm: waiting for mime message\n");
+	    let exitCodeObj = {};
+	    let cmdErrorMsgObj = {};
+	    EnigmailExecution.simpleExecCmd("/bin/sleep", ["0.1"], exitCodeObj, cmdErrorMsgObj);
+	    cnt++;
+	}
+
+	if (! this.mime_msg_done) {
+	    EnigmailLog.DEBUG("mimeDecryp.jsm: failed to get mime message\n");
+	}
+
+        if (this.mime_msg_done && this.mime_msg) {
+	    var dcPolicy = "";
+	    if (this.mime_msg.has("decryption-context")) {
+		dcPolicy = this.mime_msg.get("decryption-context");
+	    } else if (this.mime_msg.has("x-decryption-context")) {
+		dcPolicy = this.mime_msg.get("x-decryption-context");
+	    }
+	    if (dcPolicy) {
+		let mime_path = this.mimePartNumber.split(".");
+		let content_types = [];
+		let node = this.mime_msg;
+		let found_path = true;
+		for (var idx of mime_path) {
+		    if (idx > node.parts.length || idx < 1) {
+			node = null;
+			found_path = false;
+			break;
+		    }
+		    node = node.parts[idx - 1];
+		    var ct = node.get("content-type");
+		    ct = ct.replace(/\s+/g, " ").split(";").filter((p) => !p.match(/^\s*boundary=/)).join(";").trim();
+		    content_types.push(ct);
+		}
+		if (found_path)
+		{
+		    let fieldnames = [ "from", "to", "cc", "reply-to", "subject" ];
+		    let headers = {};
+		    for (let h of fieldnames) {
+			var hh = this.mime_msg.getAll(h).slice();
+			hh = hh.map((v) => v.replace(/\s*\r?\n\s*/g, " "));
+			headers[h] = hh;
+		    }
+
+		    dump ("\nDECRYPTING EMAIL\n");
+		    var decryptionContext = make_decryption_context(dcPolicy, headers, content_types);
+		    if (decryptionContext) {
+			EnigmailLog.DEBUG("mimeDecrypt.js: onStopRequest: decryptionContext: " + decryptionContext + "\n");
+			dump ("decryptionContext: " + decryptionContext + "\n");
+			associatedData = decryptionContext;
+		    }
+		    else {
+			EnigmailLog.DEBUG("mimeDecrypt.js: onStopRequest: decryptionContext invalid: (disabling DC)\n");
+			dump ("decryptionContext: (invalid)\n");
+		    }
+		}
+	    }
+	}
+
       var maxOutput = this.outQueue.length * 100; // limit output to 100 times message size
       // to avoid DoS attack
       this.proc = EnigmailDecryption.decryptMessageStart(win, false, false, this,
-        statusFlagsObj, errorMsgObj, null, maxOutput);
+        statusFlagsObj, errorMsgObj, null, maxOutput, associatedData);
 
       if (!this.proc) return;
 
diff --git a/package/mimeEncrypt.jsm b/package/mimeEncrypt.jsm
index 5998388d..5b7de174 100644
--- a/package/mimeEncrypt.jsm
+++ b/package/mimeEncrypt.jsm
@@ -11,7 +11,7 @@
  *  implemented as XPCOM component
  */
 
-var EXPORTED_SYMBOLS = ["EnigmailMimeEncrypt"];
+var EXPORTED_SYMBOLS = ["EnigmailMimeEncrypt", "make_decryption_context"];
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
@@ -30,6 +30,7 @@ Cu.import("resource://enigmail/data.jsm"); /*global EnigmailData: false */
 Cu.import("resource://enigmail/msgCompFields.jsm"); /*global EnigmailMsgCompFields: false */
 Cu.import("resource://enigmail/constants.jsm"); /*global EnigmailConstants: false */
 Cu.import("resource://enigmail/pEpAdapter.jsm"); /*global EnigmailPEPAdapter: false */
+Cu.import("resource:///modules/mailServices.js"); /*global MailServices: false */
 
 const PGPMIME_JS_ENCRYPT_CONTRACTID = "@mozilla.org/messengercompose/composesecure;1";
 const PGPMIME_JS_ENCRYPT_CID = Components.ID("{1b040e64-e704-42b9-b05a-942e569afffc}");
@@ -43,6 +44,56 @@ const MIME_ENCRYPTED = 2;
 
 var gDebugLogLevel = 0;
 
+function make_decryption_context(dcPolicy, headers, mimepath) {
+    var decryptionContext = dcPolicy;
+    var dcp = dcPolicy;
+
+    EnigmailLog.DEBUG("make_decryption_context: headers: " + headers + "\n");
+    while (dcp.length > 0) {
+	if (dcp.startsWith("{smtp=")) {
+	    dcp = dcp.substring(6);
+	    let closing = dcp.indexOf("}");
+	    if (closing == -1) {
+		break;
+	    }
+	    let hl = dcp.substring(0, closing).split(":")
+	    dcp = dcp.substring(closing + 1);
+	    for (var h of hl) {
+		if (! headers[h]) {
+		    EnigmailLog.DEBUG("make_decryption_context: unknown header: " + h + "\n");
+		    dump("make_decryption_context: unknown header: " + h + "\n");
+		}
+		else if (headers[h].length > 0) {
+		    var v = headers[h].shift();
+		    decryptionContext += h + ":" + v + "\r\n";
+		}
+	    }
+	}
+	else if (dcp.startsWith("{mime=mimepath}")) {
+	    dcp = dcp.substring(15);
+	    for (var mp of mimepath) {
+		decryptionContext += "mimepath:" + mp + "\r\n";
+	    }
+	}
+	else if (dcp.startsWith("{")) {
+	    dcp = dcp.substring(1);
+	}
+	else if (dcp.startsWith("}")) {
+	    dcp = dcp.substring(1);
+	}
+	else {
+	    break;
+	}
+    }
+    if (dcp.length > 0) {
+	EnigmailLog.DEBUG("make_decryption_context: invalid: " + dcp + "\n");
+	dump("make_decryption_context: invalid: " + dcp + "\n");
+	return null;
+    }
+    return decryptionContext;
+}
+
+
 function PgpMimeEncrypt() {}
 
 PgpMimeEncrypt.prototype = {
@@ -81,6 +132,7 @@ PgpMimeEncrypt.prototype = {
   exitCode: -1,
   inspector: null,
   checkSMime: true,
+  decryptionContext: null,
 
   // nsIStreamListener interface
   onStartRequest: function(request) {
@@ -203,6 +255,7 @@ PgpMimeEncrypt.prototype = {
         if (this.enigmailFlags.sendFlags & EnigmailConstants.SEND_ENCRYPTED) {
           // applies to encrypted and signed & encrypted
           this.cryptoMode = MIME_ENCRYPTED;
+	  this.msgIdentity = msgIdentity;
         }
         else if (this.enigmailFlags.sendFlags & EnigmailConstants.SEND_SIGNED) {
           this.cryptoMode = MIME_SIGNED;
@@ -350,6 +403,47 @@ PgpMimeEncrypt.prototype = {
       subj = jsmime.headeremitter.emitStructuredHeader("subject", EnigmailFuncs.getProtectedSubjectText(), {});
     }
 
+    var dcPolicy = this.msgIdentity.getCharAttribute("dcPolicy");
+    dump ("\nENCRYPTING EMAIL\n");
+    dump("decryptionContextPolicy: " + dcPolicy + "\n");
+    if (dcPolicy) {
+	this.decryptionContext = dcPolicy;
+
+	// e.g.
+	// {{smtp=from:from:reply-to:to:to:subject:subject}{mime=mimepath}}
+	// from:Alice <alice@university.edu>\r\nto:Bob <victim@company.com>\r\nsubject:Confidential\r\nmimepath:Content-type:application/pkcs7-mime; smime-type=enveloped-data\r\n
+	let fieldnames = [ "from", "to", "cc", "reply-to", "subject" ];
+	let headers = {};
+	for (let h of fieldnames) {
+	    var f = fieldnames[h];
+	    headers[h] = [];
+	    // FIXME: This does not work. The output is not UTF-8.  There seems to be a bug or misconfiguration.
+	    if (this.msgCompFields.hasHeader(h)) {
+		var val = MailServices.mimeConverter.decodeMimeHeaderToUTF8(this.msgCompFields.getRawHeader(h), null, false, true);
+		if (val) {
+		    headers[h].push(val);
+		}
+	    }
+	}
+
+	var mimepath = ['multipart/encrypted; protocol="application/pgp-encrypted"'];
+	this.decryptionContext = make_decryption_context(dcPolicy, headers, mimepath);
+	if (this.decryptionContext) {
+	    EnigmailLog.DEBUG("mimeEncrypt.js: encryptedHeaders: decryptionContext: " + this.decryptionContext + "\n");
+	    dump("decryptionContext: " + this.decryptionContext + "\n");
+	}
+	else {
+	    EnigmailLog.DEBUG("mimeEncrypt.js: encryptedHeaders: decryptionContext invalid: disabling DC)\n");
+	    dump("decryptionContext: invalid\n");
+	    this.decryptionContext = "";
+	}
+    }
+
+    if (dcPolicy && this.decryptionContext) {
+	this.writeOut("Decryption-Context: " + dcPolicy + "\r\n");
+	this.writeOut("X-Decryption-Context: " + dcPolicy + "\r\n");
+    }
+
     this.writeOut(subj +
       "Content-Type: multipart/encrypted;\r\n" +
       " protocol=\"application/pgp-encrypted\";\r\n" +
@@ -430,7 +524,8 @@ PgpMimeEncrypt.prototype = {
       this.enigmailFlags.sendFlags,
       this,
       statusFlagsObj,
-      errorMsgObj);
+      errorMsgObj,
+      this.decryptionContext);
     if (!proc) throw Cr.NS_ERROR_FAILURE;
 
     try {
-- 
2.17.1

